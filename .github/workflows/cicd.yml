name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Gradle
        run: ./TalDate/gradlew -p TalDate build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/taldate-backend:latest

  # Deploy to server
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH and Docker commands
        uses: appleboy/ssh-action@v1.0.0
        env:
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: DOCKERHUB_USERNAME, DOCKERHUB_PASSWORD, POSTGRES_USER, POSTGRES_PASSWORD
          script: |
            # Script to set environment variables
            echo "export SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}" >> setenv.sh
            echo "export SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}" >> setenv.sh
  
            # Run the environment variable setting script
            ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} 'bash -s' < setenv.sh
            
            # Log in to Docker Hub
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            
            # Pull and run the Docker container
            docker pull "$DOCKERHUB_USERNAME"/taldate-backend:latest
            docker stop taldate-backend
            docker rm taldate-backend
            docker run --network=host -d --name taldate-backend "$DOCKERHUB_USERNAME"/taldate-backend:latest
